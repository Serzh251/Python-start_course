# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__truediv__()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться
# округление значения до целого числа.
# Сложение.Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток. Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное
# деление количества ячеек этих двух клеток. В классе необходимо реализовать метод make_order(), принимающий экземпляр
# класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n**. Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.


class Ceil:
    def __init__(self, my_m: int):
        self.my_m = my_m

    def __add__(self, other):
        return self.my_m + other.my_m

    def __sub__(self, other):
        if self.my_m - other.my_m > 0:
            return self.my_m - other.my_m
        else:
            return f'первая клетка меньше второй, или клетки равны, вычитать нельзя!'

    def __mul__(self, other):
        return self.my_m * other.my_m

    def __truediv__(self, other):
        return round(self.my_m / other.my_m)

    def make_order(self, row):
        count = 0
        stars_count = self.my_m
        while stars_count != 0:
            stars = ''
            for i in range(row):
                if stars_count != 0:
                    stars += '*'
                    stars_count -= 1
            if stars_count != 0:
                print(stars, end='\n')
            else:
                print(stars)
                print('формирование рядов закончено')
            count += 1


ceil_1 = Ceil(15)
ceil_2 = Ceil(5)

print(f'результат сложения клеток - {ceil_1 + ceil_2}')
print(f'результат вычитания клеток - {ceil_1 - ceil_2}')
print(f'результат умножения клеток - {ceil_1 * ceil_2}')
print(f'результат деления клеток - {ceil_1 / ceil_2}')

print(ceil_1.make_order(5))
print(ceil_2.make_order(3))
